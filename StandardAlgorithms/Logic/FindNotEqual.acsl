
#ifndef FINDNOTEQUAL_ACSL_INCLUDED
#define FINDNOTEQUAL_ACSL_INCLUDED

#include "AllSomeNot.acsl"
#include "UnchangedLemmas.acsl"

/*@
  axiomatic FindNotEqual
  {
    logic integer
    FindNotEqual(value_type* a, integer m, integer n, value_type v) =
      (n <= m) ? 
       0 : ((0 <= FindNotEqual(a, m, n-1, v) < n-m-1) ?
         FindNotEqual(a, m, n-1, v) : ((a[n-1] != v) ? n-m-1 : n-m));

    logic integer
    FindNotEqual(value_type* a, integer n, value_type v) =
      FindNotEqual(a, 0, n, v);

    lemma FindNotEqual_Empty:
      \forall value_type *a, v, integer m, n;
        n <= m  ==>  FindNotEqual(a, m, n, v) == 0;

    lemma FindNotEqual_Hit:
      \forall value_type *a, v, integer m, n;
        m <= n                          ==>
        FindNotEqual(a, m, n, v) < n-m  ==>
        FindNotEqual(a, m, n+1, v) == FindNotEqual(a, m, n, v);

    lemma FindNotEqual_MissHit:
      \forall value_type *a, v, integer m, n;
        m <= n                             ==>
        a[n] != v                          ==>
        FindNotEqual(a, m, n, v)   == n-m  ==>
        FindNotEqual(a, m, n+1, v) == n-m;

    lemma FindNotEqual_MissMiss:
      \forall value_type *a, v, integer m, n;
        m <= n                             ==>
        a[n] == v                          ==>
        FindNotEqual(a, m, n, v)   == n-m  ==>
        FindNotEqual(a, m, n+1, v) == (n+1)-m;

    lemma FindNotEqual_Lower:
      \forall value_type *a, v, integer m, n;
        0 <= FindNotEqual(a, m, n, v);

    lemma FindNotEqual_Upper:
      \forall value_type *a, v, integer m, n;
        m <= n  ==>  FindNotEqual(a, m, n, v) <= n-m;

    lemma FindNotEqual_Unchanged{K,L}:
      \forall value_type *a, v, integer m, n;
        Unchanged{K,L}(a, m, n)  ==>
        FindNotEqual{K}(a, m, n, v) == FindNotEqual{L}(a, m, n, v);

    lemma FindNotEqual_WeaklyIncreasing:
      \forall value_type *a, v, integer m, n;
        m <= n  ==>  FindNotEqual(a, m, n, v) <= FindNotEqual(a, m, n+1, v);

    lemma FindNotEqual_Extend:
      \forall value_type *a, v, integer k, m, n;
        m <= k < n                        ==>
        a[k] != v                         ==>
        FindNotEqual(a, m, k, v) == k-m   ==>
        FindNotEqual(a, m, n, v) == k-m;

    lemma FindNotEqual_Increasing:
      \forall value_type *a, v, integer k, m, n;
        m <= k <= n  ==>  FindNotEqual(a, m, k, v) <= FindNotEqual(a, m, n, v);

    lemma FindNotEqual_Limit:
      \forall value_type *a, v, integer k, m, n;
        m <= k < n  ==>
        a[k] != v   ==>
        FindNotEqual(a, m, n, v) <= k-m;

    lemma FindNotEqual_AllEqual:
      \forall value_type *a, v, integer m, n;
        m <= n                ==>
        AllEqual(a, m, n, v)  ==>
        FindNotEqual(a, m, n, v) == n-m;

    lemma FindNotEqual_SomeNotEqual:
      \forall value_type *a, v, integer k, m, n;
        m <= k < n            ==> 
        a[k] != v             ==>
        AllEqual(a, m, k, v)  ==> 
        FindNotEqual(a, m, n, v) == k-m;

    lemma FindNotEqual_ResultAllEqual:
      \forall value_type *a, v, integer m, n;
        m <= n  ==>  AllEqual(a, m, m + FindNotEqual(a, m, n, v), v);

    lemma FindNotEqual_ResultNotEqual:
      \forall value_type *a, v, integer m, n;
        0 <= FindNotEqual(a, m, n, v) < n-m  ==>
        a[m + FindNotEqual(a, m, n, v)] != v;
  }
*/

#endif /* FINDNOTEQUAL_ACSL_INCLUDED */

