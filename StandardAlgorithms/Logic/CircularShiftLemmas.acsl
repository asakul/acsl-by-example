
#ifndef CIRCULARSHIFTLEMMAS_ACSL_INCLUDED
#define CIRCULARSHIFTLEMMAS_ACSL_INCLUDED

#include "IncreasingLemmas.acsl"
#include "MultisetReorder.acsl"

/*@
   axiomatic CircularShiftLemmas
   {
     lemma CircularShift_StrictLowerBound{K,L}:
       \forall value_type* a, integer m, n;
         StrictLowerBound{K}(a, m, n, \at(a[n],K))  ==>
         Equal{K,L}(a, m, n, m+1)                   ==>
         Equal{K,L}(a, n, n+1, m)                   ==>
         StrictLowerBound{L}(a, m+1, n+1, \at(a[m],L));

     lemma CircularShift_MultisetReorder{K,L}:
       \forall value_type* a, integer m, n;
         0 <= m <= n               ==>
         Equal{K,L}(a, m, n, m+1)  ==>
         Equal{K,L}(a, n, n+1, m)  ==>
         MultisetReorder{K,L}(a, m, n+1);
   }
*/

#endif /* CIRCULARSHIFTLEMMAS_ACSL_INCLUDED */

